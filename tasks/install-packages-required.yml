- name: Add Irontec repository
  yum_repository:
    name: irontec
    file: irontec
    description: Irontec RPMs repository
    baseurl: http://packages.irontec.com/centos/$releasever/$basearch/
    enabled: yes
    gpgcheck: no
    state: present

- name: "Install packages from repositories with YUM"
  yum:
    name: "{{ packages }}"
  vars:
    packages:
      - yum-utils
      - "@Development tools"
      - pcre
      - zlib
      - libffi-devel
      - nscd
      - MySQL-python
      - nginx
      - sshpass
    state: present

- name: "Checking OpenSSL version"
  shell: openssl version
  register: openssl_version

- name: "Download and unarchive OpenSSL sources"
  unarchive:
    src: http://www.openssl.org/source/openssl-1.1.1d.tar.gz
    dest: /usr/local/src/utilities/
    remote_src: yes
  when: openssl_version.stdout is not match("OpenSSL 1.1.1d.*")

- name: "Install OpenSSL from sources"
  shell: 
    cmd: |
      ./Configure linux-x86_64 --prefix=/usr 
      make && make install
    chdir: /usr/local/src/utilities/openssl-1.1.1d/
  register: install_openssl
  when: openssl_version.stdout is not match("OpenSSL 1.1.1d.*")

- name: "Debuging OpenSSL version"
  debug: 
    msg: The OpenSSL version is ({{ openssl_version.stdout }}).
    verbosity: 1
  when: install_openssl is skipped

- name: "Checking python version"
  shell: if [[ -e /usr/local/bin/python3 ]];then python3 --version; fi
  register: python_version

- name: "Download and unarchive python sources"
  unarchive:
    src: https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tar.xz
    dest: /usr/local/src/python/
    remote_src: yes
  when: python_version.stdout is not match("Python 3.8.*")

- name: "Install python from sources"
  shell: 
    cmd: |
      # make clean && make distclean
      ./configure --enable-optimizations --with-ensurepip=install
      make -j 2
      make altinstall
      cd /usr/local/bin/
      ln -s python3.8 python3
      python -c "print ('hello world')"
    chdir: /usr/local/src/python/Python-3.8.3/
  register: install_python
  failed_when: install_python.stdount != "hello world"
  when: python_version.stdout is not match("Python 3.8.*")

- name: "Debuging Python version"
  debug: 
    msg: The Python3 version is ({{ python_version.stdout }}).
    verbosity: 1
  when: install_python is skipped

- name: "Install pip3.8 packages"
  shell:
    cmd: | 
      python3.8 -m pip install --upgrade pip
      pip3.8 install wheel
      pip3.8 install setuptools
